/* global describe, it, document, before, browser, expect */
'use strict';

describe('React I13n test', function () {
    it('should init correctly and give the rootI13nNode the correct default model value', function () {
        var result = window.rootI13nNode.getMergedModel();
        expect(result).to.eql({sec: 'default-section-name', page: 'test-page'});
    });
    
    it('should fire a pageview', function () {
        var events = window.firedEvents;
        expect(events[0].name).to.eql('pageview');
    });
    
    it('should fire an update event when dom change, click handler can work with custom click event', function () {
        var hiddenBtn = document.querySelectorAll('.HiddenBtn')[0];
        hiddenBtn.click();
        var events = window.firedEvents;
        var currentEventCount = events.length;
        expect(events[currentEventCount - 2].name).to.eql('click');
        expect(events[currentEventCount - 1].name).to.eql('created');
    });
    
    it('should handle nested model data well', function () {
        var nestTestI13nComponentLevel3 = document.querySelectorAll('.NestTestI13nComponentLevel3')[0];
        nestTestI13nComponentLevel3.click();
        var events = window.firedEvents;
        var currentEventCount = events.length;
        expect(events[currentEventCount - 1].model).to.eql({
            page: 'test-page',
            sec: 'level1',
            vl1: 'foo',
            vl2: 'bar',
            vl3: 'baz',
            vl3_ovr: 'baz'
        });
    });
    
    it('should fire a click beacon', function () {
        var link = document.querySelectorAll('.NormalLink a')[0];
        link.click();
        var events = window.firedEvents;
        var currentEventCount = events.length;
        expect(events[currentEventCount - 1].name).to.eql('click');
        expect(events[currentEventCount - 1].model).to.eql({page: 'test-page', sec: 'foo'});
        expect(events[currentEventCount - 1].text).to.eql('NormalLink');
        expect(events[currentEventCount - 1].position).to.eql(1);
    });

    it('should fire a click beacon by model generated by function', function () {
        var link = document.querySelectorAll('.NormalLinkWithFunctionModel a')[0];
        link.click();
        var events = window.firedEvents;
        var currentEventCount = events.length;
        expect(events[currentEventCount - 1].name).to.eql('click');
        expect(events[currentEventCount - 1].model).to.eql({page: 'test-page', sec: 'dynamical-generated'});
        expect(events[currentEventCount - 1].text).to.eql('NormalLinkWithFunctionModel');
        expect(events[currentEventCount - 1].position).to.eql(2);
    });

    it('should fire a click beacon without redirect page if link is hash url', function () {
        var link = document.querySelectorAll('.LinkWithHashUrl a')[0];
        link.click();
        var events = window.firedEvents;
        var currentEventCount = events.length;
        expect(events[currentEventCount - 1].name).to.eql('click');
        expect(events[currentEventCount - 1].model).to.eql({page: 'test-page', sec:'foo'});
        expect(events[currentEventCount - 1].text).to.eql('LinkWithHashUrl');
        expect(events[currentEventCount - 1].position).to.eql(3);
    });
    
    it('should fire a click beacon without do anything if target="_blank"', function () {
        var link = document.querySelectorAll('.NormalLinkWithTargetBlank a')[0];
        link.click();
        var events = window.firedEvents;
        var currentEventCount = events.length;
        var currentEventCount = events.length;
        expect(events[currentEventCount - 1].name).to.eql('click');
        expect(events[currentEventCount - 1].model).to.eql({page: 'test-page', sec:'foo'});
        expect(events[currentEventCount - 1].text).to.eql('NormalLinkWithTargetBlank');
        expect(events[currentEventCount - 1].position).to.eql(4);
    });
});
